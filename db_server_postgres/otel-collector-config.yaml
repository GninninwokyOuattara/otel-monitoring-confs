# Receivers
receivers:
  filelog/pg:
    start_at: beginning
    include: [/pg_log/*.log]
    include_file_path: true
    # include: [/pg_log/postgresql-Thu.log]
    retry_on_failure:
      enabled: true
      max_elapsed_time: 0
    storage: file_storage/filelogreceiver
    multiline:
      line_start_pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}
    operators:
      - type: regex_parser
        regex: ^(?P<log_timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}) (?P<timezone>EST) \[(?P<process_id>\d+)\] (?P<log_severity>[A-ZÉÈÊË]+)\s*:\s*(?P<message>[\s\S]*)
        # Commented because with Loki and out of order ingestion.
        # - https://github.com/grafana/loki/issues/12935
        # timestamp:
        #   parse_from: attributes.timestamp_field
        #   layout: "%Y-%m-%d %H:%M:%S.%L"
        severity:
          parse_from: attributes.log_severity
  # filelog/var:
  #   start_at: beginning
  #   include: [/system_log/*]
  #   include_file_path: true
  #   retry_on_failure:
  #     enabled: true
  #     max_elapsed_time: 0
  #   storage: file_storage/filelogreceiver

  syslog:
    tcp:
      listen_address: "0.0.0.0:54526"
    protocol: rfc5424

  hostmetrics:
    root_path: /hostfs
    collection_interval: 10s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
          system.cpu.physical.count:
            enabled: true
          system.cpu.logical.count:
            enabled: true
          system.cpu.frequency:
            enabled: true
      load:
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
          system.linux.memory.available:
            enabled: true
          system.memory.limit:
            enabled: true
      disk:
      filesystem:
        metrics:
          system.filesystem.utilization:
            enabled: true
      network:
      processes:
      process:
        mute_process_all_errors: true
      system:

  postgresql:
    endpoint: 192.168.1.224:5432
    transport: tcp
    username: user_beasy
    password: BarnoinBeasyBD@224
    databases: # empty will monitor all databases non-templates.
    collection_interval: 10s
    tls:
      insecure: true

extensions:
  file_storage/filelogreceiver:
    create_directory: true
    directory: /var/lib/otelcol/file_storage/receiver
  file_storage/otlpoutput:
    create_directory: true
    directory: /var/lib/otelcol/file_storage/output

# Processors
processors:
  memory_limiter:
    check_interval: 1s
    limit_percentage: 80
    spike_limit_percentage: 15

  resourcedetection/env:
    detectors: [env]
    timeout: 2s
    override: false

  batch:

# Exporters
exporters:
  otlp:
    endpoint: "http://192.168.1.232:4317"
    retry_on_failure:
      enabled: true
    sending_queue:
      storage: file_storage/otlpoutput
    tls:
      insecure: true

  otlphttp:
    endpoint: "http://192.168.1.232:4318"
    retry_on_failure:
      enabled: true
    sending_queue:
      storage: file_storage/otlpoutput
    tls:
      insecure: true

  debug:
    verbosity: normal

# Pipelines
service:
  extensions: [file_storage/filelogreceiver, file_storage/otlpoutput]
  pipelines:
    logs/sys:
      receivers: [syslog]
      processors: [batch]
      exporters: [debug]

    logs/pg:
      receivers: [filelog/pg, filelog/var]
      processors: [memory_limiter, resourcedetection/env, batch]
      exporters: [otlp]
    metrics:
      receivers: [hostmetrics, postgresql]
      processors: [memory_limiter, resourcedetection/env, batch]
      exporters: [otlp]
