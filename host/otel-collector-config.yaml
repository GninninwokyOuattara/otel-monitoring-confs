# Receivers
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  # filelog:
  #   include: [/pg_log/*.log]
  #   # operators:
  #   #   - type: regex_parser
  #   #     regex: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} [A-Z]+) (?P<severity>[A-Z]+):  (?P<message>.*)$'
  #   #     timestamp:
  #   #       parse_from: attributes.timestamp
  #   #       layout: "%Y-%m-%d %H:%M:%S %Z"
  #   #     severity:
  #   #       parse_from: attributes.severity
  #   operators:
  #     - type: add
  #       field: resource["service.name"]
  #       value: pg
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
      load:
      memory:
      disk:
      filesystem:
      network:
      processes:
  # postgresql:
  #   endpoint: 192.168.1.224:5432
  #   transport: tcp
  #   username: user_beasy
  #   password: BarnoinBeasyBD@224
  #   databases: # empty will monitor all databases non-templates.
  #   collection_interval: 10s
  #   tls:
  #     insecure: true

# Processors
processors:
  batch:

# Exporters
exporters:
  otlphttp/logs:
    endpoint: "http://loki:3100/otlp"
    tls:
      insecure: true
  debug:
    # verbosity: detailed

  prometheus/host:
    endpoint: "0.0.0.0:8889"
    namespace: host
    resource_to_telemetry_conversion:
      enabled: true
  prometheus/others:
    endpoint: "0.0.0.0:8887"
    # namespace: srv_beasy_232 # They should come with their namespace.
    resource_to_telemetry_conversion:
      enabled: true

# Pipelines
service:
  pipelines:
    # logs:
    #   receivers: [filelog]
    #   processors: [batch]
    #   exporters: [debug, otlphttp/logs]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [debug, otlphttp/logs]
    metrics/host:
      receivers: [hostmetrics, postgresql]
      processors: [batch]
      exporters: [debug, prometheus/host]
    metrics/others:
      receivers: [otlp]
      processors: [batch]
      exporters: [debug, prometheus/others]
